using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.Entity.Migrations;
using System.Data.Entity.Validation;
using System.Text.RegularExpressions;
using System.IO;
using System.Diagnostics;
using System.Globalization;
using System.Threading;

using Excel2 = Microsoft.Office.Interop.Excel;
using PowerPoint = Microsoft.Office.Interop.PowerPoint;
using Microsoft.Office.Core;

using CompteResultat.DAL;
using CompteResultat.Common;

namespace CompteResultat.BL
{
    public class BLCompteResultat
    {
        private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        private CompteResult CRDALObject = null;

        #region PROPERTIES

        //the list of plannings
        public List<CRPlanning> CRPlannings;
        public List<ReportFile> ReportFiles;

        public int Id { get; set; }
        public string Name { get; set; }    
        //public int ParentCompanyId { get; set; }
        
        public string AssurIds { get; set; }
        public string AssurNames { get; set; }
        public string ParentCompanyIds { get; set; }
        public string ParentCompanyNames { get; set; }
        public string SubsidIds { get; set; }
        public string SubsidNames { get; set; }
        public string ContractIds { get; set; }
        public string ContractNames { get; set; }
        public int? ReportLevelId { get; set; }
        public C.eReportTypes ReportType { get; set; }        
        public C.eTypeComptes TypeComptes { get; set; }
        public int? CollegeId { get; set; }
        public string UserName { get; set; }
        public DateTime CreationDate { get; set; }
        public bool? IsActive { get; set; }
        public bool? IsAutoGenerated { get; set; }
        
        public string ExcelTemplatePath { get; set; }
        public string ExcelCRPath { get; set; }
        public bool CalculateProvision { get; set; }
        public bool IsPrev { get; set; }

        //public DateTime? DateDebut { get; set; }
        //public DateTime? DateFin { get; set; }
        //public DateTime? DateArrete { get; set; }

        //Tax properties
        public double TaxDef { get; set; }
        public double TaxAct { get; set; }
        public double TaxPer { get; set; }

        public int NumberTopPerteLoss { get; set; }

        private bool CRExists = false;

        #endregion


        public BLCompteResultat()
        {
            Id = 0;
            SetParams();
        }

        public BLCompteResultat(int id)
        {
            Id = id;
            SetParams();
        }

        public BLCompteResultat(int id, string name, string parentCompanyIds, string parentCompanyNames, string assurIds, string assurNames, string subsidIds, string subsidNames, 
                string contractIds, string contractNames, int? reportLevelId, int? collegeId, string userName, DateTime creationDate, bool? isActive, bool? isAutoGenerated,
                C.eReportTypes reportType, C.eTypeComptes typeComptes)
        {
            //DateTime? dateDebut, DateTime? dateFin, DateTime? dateArrete

            SetParams();

            Id = id;
            Name = name;
            ParentCompanyIds = parentCompanyIds;
            ParentCompanyNames = parentCompanyNames;
            SubsidIds = subsidIds;
            SubsidNames = subsidNames;
            ContractIds = contractIds;
            ContractNames = contractNames;
            ReportLevelId = reportLevelId;
            CollegeId = collegeId;
            UserName = userName;
            CreationDate = creationDate;
            IsActive = isActive;
            IsAutoGenerated = isAutoGenerated;
            AssurIds = assurIds;
            AssurNames = assurNames;
            ReportType = reportType;
            TypeComptes = typeComptes;
            //DateDebut = dateDebut;
            //DateFin = dateFin;
            //DateArrete = dateArrete;

            MapDALObject();
        }
        
        public static void GetCompSubsidValuesForAssur(ref string companies, ref string subsids, List<string> assurNames)
        {
            List<string> assurIds = new List<string>();           
            List<string> compNames = new List<string>();           
            List<string> subsidNames = new List<string>();

            foreach (string ass in assurNames)
            {
                int myAssId = Assureur.GetAssIdForAssName(ass);
                assurIds.Add(myAssId.ToString());
            }

            //get all companies & subsids
            foreach (string assId in assurIds)
            {
                int myassurId = int.Parse(assId);
                compNames.AddRange(Company.GetParentCompanyNamesForAssureurId(myassurId));
                subsidNames.AddRange(Company.GetSubsidNamesForAssureurId(myassurId));
            }

            companies = string.Join(C.cVALSEP, compNames);
            subsids = string.Join(C.cVALSEP, subsidNames);           
        }

        private void SetParams()
        {
            CRPlannings = new List<CRPlanning>();
            ReportFiles = new List<ReportFile>();
        }

        public int CreateNewCompteResultat(bool modeSynthese = false)
        {            
            try
            {
                //verify if our CR is at the level of the assur or the level of a parent company
                //if more than 1 parent company was selected, the level is assur
                bool crIsAssurLevel = true;
                if (!ParentCompanyIds.Contains(C.cVALSEP))
                    crIsAssurLevel = false;

                List<string> parentCompanyList = Regex.Split(ParentCompanyIds, C.cVALSEP).ToList();
                List<string> assurList = Regex.Split(AssurIds, C.cVALSEP).ToList();

                if(crIsAssurLevel)
                    Id = CompteResult.GetIdForCRNameAndAssur(Name, assurList[0]);
                else
                    Id = CompteResult.GetIdForCRNameAndParentComp(Name, parentCompanyList[0]);

                if (!modeSynthese)
                {
                    if (Id != C.cINVALIDID)
                    {
                        CRExists = true;
                        UpdateDBRecord();
                    }
                    else
                    {
                        CRExists = false;
                        Id = AddDBRecord();
                    }
                }

                //Create Excel Docs
                foreach (CRPlanning crp in CRPlannings)
                {
                    CreateExcelDoc(Id, crp, modeSynthese);
                }

                return Id;

            }
            catch (Exception ex)
            {
                log.Error("CreateNewCompteResultat :: " + ex.Message);
                throw ex;
            }
        }

        private void CreateExcelDoc(int CRId, CRPlanning crp, bool modeSynthese)
        {
            try
            {
                string templateFileName;
                C.eReportTemplateTypes templateType = C.eReportTemplateTypes.SANTE;                
                string templateFileNamePPT;
                string templateFilePath;
                string templateFilePathPPT;
                string prevProvisionFile;
                string crFileName;
                string crFileNamePPT;
                string crFilePath;
                string crFilePathPPT;
                int yearsToCalc = 1;
                bool reportWithOption = false;
                
                //new name of the Exel file
                crFileName = Name + ".xlsm";
                crFileNamePPT = Name + ".pptm";

                //copy & rename the appropriate Template File from the ReportTemplates folder to the ExcelCR folder
                if (ReportLevelId.HasValue)
                {
                    templateFileName = ReportTemplate.GetTemplateFileNameForId(ReportLevelId.Value);
                    templateType = ReportTemplate.GetTemplateTypeForId(ReportLevelId.Value);
                    templateFileNamePPT = templateFileName.Replace(".xlsm", ".pptm");
                    yearsToCalc = ReportTemplate.GetYearsToCalcForId(ReportLevelId.Value);
                    reportWithOption = ReportTemplate.GetWithOptionFlag(ReportLevelId.Value);
                }
                else
                    throw new Exception("No report template is associated with the specified CR!");
               
                templateFilePath = Path.Combine(ExcelTemplatePath, templateFileName);
                templateFilePathPPT = Path.Combine(ExcelTemplatePath, templateFileNamePPT);
                prevProvisionFile = Path.Combine(ExcelTemplatePath, C.cPrevProvisionFileName);
                crFilePath = Path.Combine(ExcelCRPath, crFileName);
                crFilePathPPT = Path.Combine(ExcelCRPath, crFileNamePPT);

                string newPrevProvPath = Path.Combine(ExcelCRPath, C.cPrevProvisionFileName);

                //### display warning if the destination file already exists or should we just overwrtie the file ???

                if (File.Exists(templateFilePath))
                {
                    try
                    {
                        File.Copy(templateFilePath, crFilePath, true);
                    } catch(Exception ex)
                    {
                        log.Error(ex.Message);
                    }
                }
                else
                {
                    throw new Exception("The specified Excel template file does not exist: " + templateFileName);
                }

                if (ReportType == C.eReportTypes.Standard || ReportType == C.eReportTypes.GlobalSynthese)
                {
                    if (File.Exists(templateFilePathPPT) )
                        File.Copy(templateFilePathPPT, crFilePathPPT, true);
                    else
                        throw new Exception("The specified PPT template file does not exist: " + templateFileNamePPT);
                }

                if (templateType == C.eReportTemplateTypes.PREV || templateType == C.eReportTemplateTypes.PREV_GLOBAL)
                {
                    if (File.Exists(prevProvisionFile))
                        File.Copy(prevProvisionFile, newPrevProvPath, true);
                    else
                        throw new Exception("The 'PrevProvision.xlsm' file does not exist in the ReportTemplates folder!");
                }

                if (CRExists && !modeSynthese)
                    ReportFile.Delete(CRId, C.eReportFileTypes.Excel.ToString());

                ReportFile repFile = new ReportFile { CRId = CRId, FileType = C.eReportFileTypes.Excel.ToString(), FileLocation = crFileName };
                if(!modeSynthese)
                    ReportFile.Insert(repFile);

                ReportFiles.Add(repFile);

                //modify the excel file => update various Data Sheets
                FileInfo fiExcelFile = new FileInfo(crFilePath);

                //college is no longer required
                string college;
                if (CollegeId.HasValue)
                    college = College.GetCollegeNameForId(CollegeId.Value);
                else
                    college = "";
                    //throw new Exception("CreateExcelDoc:: CollegeId does not contain any value");

                //the Presta Data will be required for several methods, so we extract it only once here
                DateTime debutPeriod;
                DateTime finPeriod;
                DateTime dateArret;                

                //### change debutPeriode if we are using Template 1 => check DB value in ReportFile Table
                //DateTime dtNewDebut = null;

                if (crp.DebutPeriode.HasValue)
                    debutPeriod = crp.DebutPeriode.Value;
                else
                    throw new Exception("CreateExcelDoc:: No date was provided for 'DebutPériode'!");

                if (crp.FinPeriode.HasValue)
                    finPeriod = crp.FinPeriode.Value;
                else
                    throw new Exception("CreateExcelDoc:: No date was provided for 'FinPériode'!");

                if (crp.DateArret.HasValue)
                    dateArret = crp.DateArret.Value;
                else
                    throw new Exception("CreateExcelDoc:: No date was provided for 'DateArret'!");

                if (ReportType == C.eReportTypes.Standard)
                {
                    if (templateType == C.eReportTemplateTypes.SANTE)
                        CreateExcelSANTEData(fiExcelFile, AssurNames, ParentCompanyNames, SubsidNames, ContractNames, debutPeriod, finPeriod, yearsToCalc, college,
                            dateArret, crp, crFilePathPPT, crFilePath, templateType, reportWithOption);                    
                    else if (templateType == C.eReportTemplateTypes.PREV) 
                    {
                        CreateExcelPREVData(fiExcelFile, AssurNames, ParentCompanyNames, SubsidNames, ContractNames, debutPeriod, finPeriod, college,
                        dateArret, crp, crFilePathPPT, crFilePath, templateType, yearsToCalc, CalculateProvision);
                    }
                }
                else 
                {
                    CreateExcelGLOBALData(fiExcelFile, ParentCompanyNames, SubsidNames, debutPeriod, finPeriod, dateArret, ReportType, templateType);
                }
            }
            catch (Exception ex)
            {
                log.Error("CreateExcelDoc :: " + ex.Message);
                throw ex;
            }
        }

        public void CreateExcelGLOBALData(FileInfo fiExcelFile, string companyList, string subsidList, DateTime debutPeriod, DateTime finPeriod,
           DateTime dateArret, C.eReportTypes reportType, C.eReportTemplateTypes templateType)
        {
            int numberTopPerteLoss = 0;

            if (templateType == C.eReportTemplateTypes.SANTE_GLOBAL)
                ExcelSheetHandler.FillGlobalSheet(fiExcelFile, companyList, subsidList, debutPeriod, finPeriod, dateArret, reportType, TypeComptes, TaxDef, TaxAct, TaxPer);
            else if (templateType == C.eReportTemplateTypes.PREV_GLOBAL)
                ExcelSheetHandler.FillGlobalSheetPrev(fiExcelFile, companyList, subsidList, debutPeriod, finPeriod, dateArret, reportType, TypeComptes, TaxDef, TaxAct, TaxPer);
            else if (templateType == C.eReportTemplateTypes.SANTE_SYNT)
            {
                ExcelSheetHandler.FillGlobalSheetSynthese(fiExcelFile, companyList, subsidList, debutPeriod, finPeriod, dateArret, reportType, TypeComptes, TaxDef, TaxAct, TaxPer);
                numberTopPerteLoss = NumberTopPerteLoss;
            }
            else if (templateType == C.eReportTemplateTypes.PREV_SYNTH)
            {
                ExcelSheetHandler.FillGlobalSheetPrev(fiExcelFile, companyList, subsidList, debutPeriod, finPeriod, dateArret, reportType, TypeComptes, TaxDef, TaxAct, TaxPer);
                numberTopPerteLoss = NumberTopPerteLoss;
            }

            ExcelSheetHandler.FillDates(fiExcelFile, dateArret, debutPeriod, finPeriod, TaxDef, TaxAct, TaxPer, null, numberTopPerteLoss, TypeComptes);

            ExcelSheetHandler.FillOUI(fiExcelFile);

            ExcelSheetHandler.FillTypePrev(fiExcelFile);
        }       

        public void CreateExcelPREVData(FileInfo fiExcelFile, string assurNameList, string parentCompanyNameList, string companyNameList, string contrNameList, DateTime debutPeriod, DateTime finPeriod,
            string college, DateTime dateArret, CRPlanning crp, string crFilePathPPT, string crFilePath, C.eReportTemplateTypes templateType, 
            int yearsToCalc, bool calculateProvision)
        {
            DateTime debutNew;
            DateTime finNew;

            try
            {
                //Fill the DATA COT Sheets                
                ExcelSheetHandler.FillCotSheet(fiExcelFile, assurNameList, parentCompanyNameList, companyNameList, contrNameList, college, debutPeriod, finPeriod, dateArret, yearsToCalc, templateType, TypeComptes);

                //Fill the DATA PREV Sheet
                ExcelSheetHandler.FillPrevProvSheet(C.ePrevProv.Prev, fiExcelFile, assurNameList, parentCompanyNameList, companyNameList, contrNameList, college, debutPeriod, finPeriod, dateArret, yearsToCalc, TypeComptes);

                //Fill the DATA PROV Sheet
                ExcelSheetHandler.FillPrevProvSheet(C.ePrevProv.Prov, fiExcelFile, assurNameList, parentCompanyNameList, companyNameList, contrNameList, college, debutPeriod, finPeriod, dateArret, yearsToCalc, TypeComptes);

                ExcelSheetHandler.FillDates(fiExcelFile, dateArret, debutPeriod, finPeriod, null, null, null, calculateProvision, NumberTopPerteLoss, TypeComptes);

                //Test - we no longer use Excel Macros
                //ExcelSheetHandler.FillOUI(fiExcelFile);

                ExcelSheetHandler.FillTypePrev(fiExcelFile);

                //### run Excel Macros 
                //RunExcelMacro(fiExcelFile.FullName, "PROVISIONCALCUL.PROVISIONCALCUL", false);

                //RunExcelMacro(fiExcelFile.FullName, "FULL.FULL", false);

                //RunPPTMacro(crFilePathPPT, crFilePath, "M2", false);

            }
            catch (Exception ex)
            {
                log.Error("CreateExcelPREVData" + ex.Message);
                throw ex;
            }
        }

        public void CreateExcelSANTEData(FileInfo fiExcelFile, string assurNameList, string parentCompanyNameList, string companyNameList, string contrNameList, DateTime debutPeriod, DateTime finPeriod, 
            int yearsToCalc, string college, DateTime dateArret, CRPlanning crp, string crFilePathPPT, string crFilePath, C.eReportTemplateTypes templateType, bool reportWithOption)
        {
            DateTime debutNew;
            DateTime finNew;

            try
            {                
                //Fill the various Excel Sheets                
                //Stopwatch stopWatch = new Stopwatch();
                //string elapsedTime = "";
                //TimeSpan ts = new TimeSpan();

                //stopWatch.Start(); 

                ExcelSheetHandler.FillDemoSheet(fiExcelFile, assurNameList, parentCompanyNameList, companyNameList, contrNameList, debutPeriod, finPeriod, dateArret, yearsToCalc, reportWithOption);

                //stopWatch.Stop();
                //ts = stopWatch.Elapsed;
                //elapsedTime = String.Format("{0:00}:{1:00}:{2:00}.{3:00}", ts.Hours, ts.Minutes, ts.Seconds, ts.Milliseconds / 10);
                //Debug.WriteLine("Demo: " + elapsedTime);

                //stopWatch.Start();

                ExcelSheetHandler.FillCotSheet(fiExcelFile, assurNameList, parentCompanyNameList, companyNameList, contrNameList, college, debutPeriod, finPeriod, dateArret, yearsToCalc, templateType, TypeComptes);

                //stopWatch.Stop();
                //ts = stopWatch.Elapsed;
                //elapsedTime = String.Format("{0:00}:{1:00}:{2:00}.{3:00}", ts.Hours, ts.Minutes, ts.Seconds, ts.Milliseconds / 10);
                //Debug.WriteLine("Cot: " + elapsedTime);



                //*************************** START PRESTA DATA ******************************************

                #region PRESTA DATA SHEET
                
                List<string> contrList = Regex.Split(contrNameList, C.cVALSEP).ToList();                
                List<string> parentCompanyList = Regex.Split(parentCompanyNameList, C.cVALSEP).ToList();
                List<string> companyList = Regex.Split(companyNameList, C.cVALSEP).ToList();
                List<string> assurList = Regex.Split(assurNameList, C.cVALSEP).ToList();

                List<PrestSante> myPrestaDataNormalized = new List<PrestSante>();
                List<PrestSante> prestaDataNormalizedFirstYear = new List<PrestSante>();
                List<PrestSante> yearPrestaData;
                
                int years = 0;
                debutNew = new DateTime(debutPeriod.Year - years, debutPeriod.Month, debutPeriod.Day);
                finNew = new DateTime(finPeriod.Year - years, finPeriod.Month, finPeriod.Day);

                if (TypeComptes == C.eTypeComptes.Comptable)
                {
                    yearPrestaData = PrestSante.GetPrestationsForContractsCompta(assurList, parentCompanyList, companyList, contrList, college, debutNew, finNew, dateArret);
                }
                else
                {
                    yearPrestaData = PrestSante.GetPrestationsForContracts(assurList, parentCompanyList, companyList, contrList, college, debutNew, finNew, dateArret);
                }

                List<PrestSante> yearPrestaDataNormalized = NormalizeGroupGarantyLabelsInPrestaTable(yearPrestaData);

                //the following is required for FillQuartileSheet & FillAffichageSheet
                if (years == 0)
                    prestaDataNormalizedFirstYear = yearPrestaDataNormalized;

                myPrestaDataNormalized.AddRange(yearPrestaDataNormalized);
                
                // this is for Report Templates with Option Flag get required Presta Data & fill Temp Table
                int mycnt = 0;
                if (reportWithOption)
                {
                    foreach (PrestSante ps in myPrestaDataNormalized)
                    {
                        mycnt++;
                        string benef = ps.Beneficiaire;
                        string contr = ps.ContractId;
                        bool isOption = false;
                        bool basefound = false;
                        bool optionfound = false;

                        if (!string.IsNullOrEmpty(ps.WithOption))
                        {
                            if (ps.WithOption.Trim().ToUpper() == "TRUE")
                                isOption = true;
                        }

                        if (isOption)
                        {
                            ps.BO1 = "OPTION";
                            ps.BO2 = "OPTION";
                            optionfound = true;

                            //if we find an option first, both BO's will be OPTION and we can stop here (continue loop with next element)
                            continue;
                        }
                        else
                        {
                            ps.BO1 = "BASE";
                            ps.BO2 = "BASE";
                            basefound = true;
                        }

                        //var x = myPrestaDataNormalized.Where(p => p.Beneficiaire == benef && p.WithOption.Trim().ToUpper() == "TRUE");
                        //if (x.Any())
                        //{
                        //    ps.BO1 = "BASEOPTION";
                        //    ps.BO2 = "OPTION";
                        //    continue;
                        //}

                        if (true)
                        {
                            foreach (PrestSante ps2 in myPrestaDataNormalized)
                            {
                                if (ps2.Beneficiaire == benef)
                                {
                                    //isOption = ps2.WithOption.HasValue ? ps2.WithOption.Value : false;
                                    isOption = false;
                                    if (!string.IsNullOrEmpty(ps2.WithOption))
                                    {
                                        if (ps2.WithOption.Trim().ToUpper() == "TRUE")
                                            isOption = true;
                                    }

                                    if (basefound && isOption)
                                    {
                                        ps.BO1 = "BASEOPTION";
                                        ps.BO2 = "OPTION";
                                        break;
                                    }
                                    //this is no longer required - we will never get here
                                    else if (optionfound && !isOption)
                                    {
                                        ps.BO1 = "BASEOPTION";
                                        ps.BO2 = "OPTION";
                                        basefound = true;
                                        break;
                                    }
                                }
                            }
                        } // end of : if(false) ...

                    }
                }

                ExcelSheetHandler.FillPrestSheet(fiExcelFile, crp, myPrestaDataNormalized, reportWithOption);

                #endregion

                //*************************** END PRESTA DATA ******************************************


                //*************************** START EXPERIENCE DATA******************************************

                //### this is a temporary solution => get data from table _TempExpData and send them to excel
                ExcelSheetHandler.FillExperienceSheet(fiExcelFile, debutPeriod, finPeriod);

                //*************************** END EXPERIENCE DATA ******************************************

                ExcelSheetHandler.FillProvisionSheet(fiExcelFile, crp, myPrestaDataNormalized);

                ExcelSheetHandler.FillQuartileSheet(fiExcelFile, prestaDataNormalizedFirstYear);

                //this is no longer required                
                ExcelSheetHandler.FillAffichageSheet(fiExcelFile, assurList[0]);

                ExcelSheetHandler.FillDates(fiExcelFile, dateArret, debutPeriod, finPeriod, TaxDef, TaxAct, TaxPer, null);


                //### do we need to calculate data and add them to the ReportData Table ???

                //###Test - we no longer use Excel Macros
                ExcelSheetHandler.FillOUI(fiExcelFile);


                //### run Excel Macro
                //RunExcelMacro(fiExcelFile.FullName, "FULL.FULL", false);

                //RunPPTMacro(crFilePathPPT, crFilePath, "M2", false);

                //### for testing
                //System.Diagnostics.Process.Start(crFilePath);
                //System.Diagnostics.Process.Start(crFilePathPPT);
            }
            catch (Exception ex)
            {
                log.Error(ex.Message);
                throw ex;
            }
        }

        public int AddDBRecord()
        {
            try
            {
                int crId = 0;

                MapDALObject();
                crId = CompteResult.Insert(CRDALObject);

                //add the planning information
                foreach (CRPlanning crp in CRPlannings)
                {
                    crp.CRId = crId;
                    CRPlanning.Insert(crp);
                }

                return crId;
            }
            catch (Exception ex)
            {
                log.Error("AddDBRecord :: " + ex.Message);
                throw ex;
            }
        }

        public void UpdateDBRecord()
        {
            try
            {
                if (Id == 0)
                    throw new Exception("Id cannot be 0 - Source: BLCompteResultat::UpdateDBRecord");

                MapDALObject();
                CompteResult.Update(CRDALObject);

                //Update Planning information
                //### update Planning only if there is only one single Planning available - otherwise we don't know which Planning shoul dbe updated
                //we also need to retrieve the Id of that Planning

                List<CRPlanning> oldPls = CRPlanning.GetCRPlannngForComptesResultat(Id);

                if (oldPls.Count == 1)
                {
                    CRPlanning newPl = CRPlannings[0];

                    newPl.CRId = Id;
                    newPl.Id = oldPls[0].Id;
                    CRPlanning.Update(newPl);
                }

            }
            catch (Exception ex)
            {
                log.Error("UpdateDBRecord :: " + ex.Message);
                throw ex;
            }
        }

        public static void DisplayExcelFile(int CRId)
        {
            try
            {
            }
            catch (Exception ex)
            {
                log.Error(ex.Message);
                throw ex;
            }
        }

        public static void DeleteCompteResultat(int CRId)
        {
            try
            {
                CompteResult.Delete(CRId);
            }
            catch (Exception ex)
            {
                log.Error(ex.Message);
                throw ex;
            }
        }

        public void DeleteCompteResultat()
        {
            try
            {
                MapDALObject();
                CompteResult.Delete(CRDALObject);
            }
            catch (Exception ex)
            {
                log.Error(ex.Message);
                throw ex;
            }
        }

        private void MapDALObject()
        {
            CRDALObject = new CompteResult();

            CRDALObject.Id = Id;
            CRDALObject.Name = Name;
            CRDALObject.CompanyIds = ParentCompanyIds;
            CRDALObject.CompanyNames = ParentCompanyNames;
            CRDALObject.AssurIds = AssurIds;
            CRDALObject.AssurNames = AssurNames;
            CRDALObject.SubsidIds = SubsidIds;
            CRDALObject.SubsidNames = SubsidNames;
            CRDALObject.ContractIds = ContractIds;
            CRDALObject.ContractNames = ContractNames;
            CRDALObject.ReportLevelId = ReportLevelId;
            CRDALObject.CollegeId = CollegeId;
            CRDALObject.UserName = UserName;
            CRDALObject.CreationDate = CreationDate;
            CRDALObject.IsActive = IsActive;
            CRDALObject.IsAutoGenerated = IsAutoGenerated;
            CRDALObject.ReportType = ReportType.ToString();

            CRDALObject.TaxActif = TaxAct;
            CRDALObject.TaxDefault = TaxDef;
            CRDALObject.TaxPerif = TaxPer;

        }

        public static List<PrestSante> NormalizeGroupGarantyLabelsInPrestaTable(List<PrestSante> myPrestData)
        {
            try
            {
                List<PrestSante> prestaNormalized = new List<PrestSante>();

                //Pre-load Groups and Garanties for all Assureurs that are found in the Presta Table
                List<string> assList = myPrestData.OrderBy(p => p.AssureurName).Select(p => p.AssureurName).Distinct().ToList();
                
                List<GroupGarantySante> groupSanteListForAssureur = new List<GroupGarantySante>();
                List<GroupGarantySante> groupSanteListAll = GroupGarantySante.GetGroupsAndGarantiesForAssureur(C.cDEFAULTASSUREUR);

                foreach (string assurName in assList)
                {
                    //int assurId = Assureur.GetAssIdForAssName(assurName);
                    if (assurName != C.cDEFAULTASSUREUR)
                    {
                        groupSanteListForAssureur = GroupGarantySante.GetGroupsAndGarantiesForAssureur(assurName);
                        groupSanteListAll.AddRange(groupSanteListForAssureur);
                    }
                }

                List<Assureur> myAssurList = Assureur.GetAllAssureurs();

                foreach (PrestSante prest in myPrestData)
                { 
                    //get Garanty Label
                    //int assureurId = Assureur.GetAssIdForAssName(prest.AssureurName);
                    //int assureurId = myAssurList.Where(a => a.Name == prest.AssureurName).Select(a => a.Id).First();
                    string codeActe = prest.CodeActe;
                    string assurName = prest.AssureurName;

                    //if (assureurId == C.cINVALIDID)
                    //    throw new Exception("CollectPrestaData:: No AssureurId was found for the AssureurName: " + prest.AssureurName);
                    if (String.IsNullOrEmpty(assurName))
                        throw new Exception("NormalizeGroupGarantyLabelsInPrestaTable:: No Assureur Name was provided!");
                    if (String.IsNullOrEmpty(codeActe))
                        throw new Exception("NormalizeGroupGarantyLabelsInPrestaTable:: No CodeActe was provided!");

                    GenericClasses ggPair = BLGroupsAndGaranties.GetNormalizedGroupGarantyPair(assurName, codeActe, groupSanteListAll);

                    //update DB if any of the fields changed
                    if (prest.GroupName != ggPair.GroupName || prest.GarantyName != ggPair.GarantyName)
                    {
                        prest.GroupName = ggPair.GroupName;
                        prest.GarantyName = ggPair.GarantyName;
                        PrestSante.UpdateGroupGaranty(prest.Id, prest.GroupName, prest.GarantyName);
                    }

                    prestaNormalized.Add(prest); 
                }

                return prestaNormalized;
            }
            catch (Exception ex)
            {
                log.Error(ex.Message);
                throw ex;
            }
        }

        private List<string> GetContractIds(List<PrestSanteContrIdCount> contrIdCount, ref int indx)
        {
            //get the count of presta per contractId
            List<string> contrListExp = new List<string>();
            long maxRecords = C.maxPrestaLines;
            long cnt = 0;
            //int ind = 0;

            if (indx >= contrIdCount.Count()-1)
                return null;

            for (int i = indx; i < contrIdCount.Count(); i++)
            {
                if (cnt + contrIdCount[i].Count < maxRecords)
                {
                    indx = i;
                    cnt += contrIdCount[i].Count;
                    contrListExp.Add(contrIdCount[i].ContractId);
                }
                else
                    break;
            }

            return contrListExp;
        }


        public void RunExcelMacro(string excelFileName, string macro, bool visible)
        {
            //### improve & cleanup code


            // Define Workbooks
            Excel2.Application oExcel = null;
            Excel2.Workbooks oBooks = null;
            Excel2._Workbook oBook = null;
            object oMissing = System.Reflection.Missing.Value;

            try
            {
                //### test thread culture
                System.Threading.Thread.CurrentThread.CurrentCulture = new CultureInfo("fr-FR");

                FileInfo fi = new FileInfo(excelFileName);

                // Create an instance of Microsoft Excel
                //Excel2.ApplicationClass oExcel = new Excel2.ApplicationClass();

                oExcel = new Excel2.Application();
                
                oExcel.Visible = visible;
                oExcel.DisplayAlerts = true;
               
                oBooks = oExcel.Workbooks;

                //Open the file, using the 'path' variable                
                oBook = oBooks.Open(excelFileName, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing,
                    oMissing, oMissing, oMissing, oMissing, oMissing, oMissing);


                //### activate
                //Object[] oRunArgs = { "'" + fi.Name + "'!FULL.FULL" };

                Object[] oRunArgs = { "'" + fi.Name + "'!" + macro };
                oExcel.GetType().InvokeMember("Run", System.Reflection.BindingFlags.Default | System.Reflection.BindingFlags.InvokeMethod, null,
                    oExcel, oRunArgs);


                //oRunArgs = new object[] { fi.Name + "!exportFile" };
                //oExcel.GetType().InvokeMember("Run", System.Reflection.BindingFlags.Default | System.Reflection.BindingFlags.InvokeMethod, null,
                //    oExcel, oRunArgs);

                //save excel file
                oBook.Save();

                // Quit Excel and clean up.
                oBook.Close(false, oMissing, oMissing);

                System.Runtime.InteropServices.Marshal.ReleaseComObject(oBook);
                oBook = null;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oBooks);
                oBooks = null;
                oExcel.Quit();
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oExcel);
                oExcel = null;

                //Garbage collection
                GC.Collect();
            }
            catch (Exception ex)
            {

                if (oBook != null)
                {
                    try
                    {
                        oBook.Close(false, oMissing, oMissing);
                    }
                    catch (Exception ex2) { }

                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oBook);
                    oBook = null;
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oBooks);
                    oBooks = null;
                }

                if (oExcel != null)
                {
                    try
                    {
                        oExcel.Quit();
                    }
                    catch (Exception ex2) { }

                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oExcel);
                    oExcel = null;
                }

                log.Error("Error :: RunExcelMacro : " + ex.Message);
                throw ex;
            }
        }

        public void RunPPTMacro(string pptFileName, string excelFile, string macro, bool visible)
        {
            //### improve & cleanup code

            // Define Workbooks
            PowerPoint.Application oPP = null;
            PowerPoint.Presentations oPresSet = null;
            PowerPoint._Presentation _activePres = null;
            object oMissing = System.Reflection.Missing.Value;

            string mess = "";

            try
            {
                //open Excel
                //System.Diagnostics.Process excelProc = System.Diagnostics.Process.Start(excelFile);

                Excel2.Application oExcel = new Excel2.Application();
                oExcel.Visible = false;
                oExcel.DisplayAlerts = false;
                Excel2.Workbooks oBooks = oExcel.Workbooks;
                Excel2._Workbook oBook = oBooks.Open(excelFile, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing, oMissing,
                    oMissing, oMissing, oMissing, oMissing, oMissing, oMissing);

                FileInfo fi = new FileInfo(pptFileName);

                //string pptTempName = fi.DirectoryName + @"\TEMP.pptm";

                oPP = new PowerPoint.Application();
                oPP.DisplayAlerts = Microsoft.Office.Interop.PowerPoint.PpAlertLevel.ppAlertsNone;
                //oPP.Visible = MsoTriState.msoFalse;

                oPresSet = oPP.Presentations;
                _activePres = oPresSet.Open(fi.FullName, MsoTriState.msoFalse, MsoTriState.msoFalse, MsoTriState.msoTrue);

                //Object[] oRunArgs = { "'" + fi.Name + "'!M2" };
                Object[] oRunArgs = { "'" + fi.Name + "'!" + macro };
                oPP.GetType().InvokeMember("Run", System.Reflection.BindingFlags.Default | System.Reflection.BindingFlags.InvokeMethod, null,
                    oPP, oRunArgs);

                //close Excel
                try
                {
                    //excelProc.CloseMainWindow();
                    //excelProc.Close();
                    //excelProc.Dispose();
                    //excelProc.Kill();
                }
                catch (Exception exCloseExcel)
                {
                    //excelProc.Kill(); 
                }

                //save excel file
                //oBook.Save();

                // Quit Excel and clean up.
                Thread.Sleep(1000);
                oBook.Close(false, oMissing, oMissing);
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oBook);
                oBook = null;
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oBooks);
                oBooks = null;
                oExcel.Quit();
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oExcel);
                oExcel = null;


                mess += "kill excel" + Environment.NewLine;

                //_activePres.Final = false;

                Thread.Sleep(2000);

                _activePres.Save();
                
                //_activePres.SaveAs(pptTempName);

                mess += "save ppt temp" + Environment.NewLine;

                Thread.Sleep(2000);

                //_activePres.Final = true;

                // Quit PPT and clean up.
                if (_activePres != null)
                {
                    mess += "check activepres = null" + Environment.NewLine;
                    try
                    {
                        _activePres.Close();
                        mess += "activepres close" + Environment.NewLine;
                    }
                    catch (Exception exClosePresentation) { }

                    System.Runtime.InteropServices.Marshal.ReleaseComObject(_activePres);
                    mess += "release activepres" + Environment.NewLine;
                    _activePres = null;
                    mess += "activepres = null" + Environment.NewLine;
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oPresSet);
                    mess += "release presset" + Environment.NewLine;
                    oPresSet = null;
                    mess += "presset null" + Environment.NewLine;
                    try
                    {
                        Thread.Sleep(1000);
                        oPP.Quit();
                        mess += "opp quit" + Environment.NewLine;
                    }
                    catch (Exception exQuitPPT) { }

                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oPP);
                    mess += "release opp" + Environment.NewLine;
                    oPP = null;
                    mess += "opp = null" + Environment.NewLine;
                }

                GC.Collect();
                mess += "garbage" + Environment.NewLine;

                //Kill PPT File
                var processes = from p in Process.GetProcessesByName("POWERPNT") select p;                

                foreach (var process in processes)
                {
                    //if (process.MainWindowTitle == "TEMP.pptm")
                    try
                    {
                        mess += "test process null" + Environment.NewLine;
                        if (process != null)
                        {
                            process.Close();
                            Thread.Sleep(1000);
                            mess += "close process" + Environment.NewLine;

                            if (process != null)
                            {
                                process.Kill();
                                mess += "kil process" + Environment.NewLine;
                            }
                        }
                    }
                    catch (Exception exCloseProc) { }
                }

                //rename file & delete temp file
                //if (File.Exists(pptFileName))
                //{
                //    File.Delete(pptFileName);
                //    mess += "delete ppt" + Environment.NewLine;
                //    File.Move(pptTempName, pptFileName);
                //    mess += "move temp" + Environment.NewLine;
                //}

                //if (File.Exists(pptTempName))
                //    File.Delete(pptTempName);
                //mess += "delete temp" + Environment.NewLine;

            }
            catch (Exception ex)
            {
                if (_activePres != null)
                {
                    try
                    {
                        _activePres.Close();
                    }
                    catch (Exception ex2) { }
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oPresSet);
                    oPresSet = null;
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(_activePres);
                    _activePres = null;
                }

                if (oPP != null)
                {
                    try
                    {
                        oPP.Quit();
                    }
                    catch (Exception ex2) { }
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(oPP);
                    oPP = null;
                }

                log.Error("Error :: RunPPTMacro : " + ex.Message);
                throw ex;
            }
        }

        
    }
}
