//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CompteResultat.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CompteResultatEntities : DbContext
    {
        public CompteResultatEntities()
            : base("name=CompteResultatEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Assureur> Assureurs { get; set; }
        public virtual DbSet<Cadencier> Cadenciers { get; set; }
        public virtual DbSet<CollabExterne> CollabExternes { get; set; }
        public virtual DbSet<College> Colleges { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<CompanyGroup> CompanyGroups { get; set; }
        public virtual DbSet<CompteResult> CompteResults { get; set; }
        public virtual DbSet<Contract> Contracts { get; set; }
        public virtual DbSet<CotisatSante> CotisatSantes { get; set; }
        public virtual DbSet<CRPlanning> CRPlannings { get; set; }
        public virtual DbSet<Demography> Demographies { get; set; }
        public virtual DbSet<Distributeur> Distributeurs { get; set; }
        public virtual DbSet<Domain> Domains { get; set; }
        public virtual DbSet<MyCompany> MyCompanies { get; set; }
        public virtual DbSet<PrestSante> PrestSantes { get; set; }
        public virtual DbSet<ReAssureur> ReAssureurs { get; set; }
        public virtual DbSet<ReportData> ReportDatas { get; set; }
        public virtual DbSet<ReportFile> ReportFiles { get; set; }
        public virtual DbSet<C_TempOtherFields> C_TempOtherFields { get; set; }
        public virtual DbSet<Import> Imports { get; set; }
        public virtual DbSet<ReportTemplate> ReportTemplate { get; set; }
        public virtual DbSet<AgeLabel> AgeLabels { get; set; }
        public virtual DbSet<GroupGarantySante> GroupGarantySantes { get; set; }
        public virtual DbSet<CotisatPrev> CotisatPrevs { get; set; }
        public virtual DbSet<DecomptePrev> DecomptePrevs { get; set; }
        public virtual DbSet<SinistrePrev> SinistrePrevs { get; set; }
        public virtual DbSet<TypePrevoyance> TypePrevoyances { get; set; }
        public virtual DbSet<C_TempExpData> C_TempExpData { get; set; }
        public virtual DbSet<ProvPrev> ProvPrevs { get; set; }
        public virtual DbSet<FraisPrevoyance> FraisPrevoyances { get; set; }
        public virtual DbSet<FraisSante> FraisSantes { get; set; }
        public virtual DbSet<ImportFile> ImportFiles { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
    
        public virtual ObjectResult<Nullable<double>> SPGetSumPrestaForDossier(string dossier, Nullable<System.DateTime> dateArret)
        {
            var dossierParameter = dossier != null ?
                new ObjectParameter("Dossier", dossier) :
                new ObjectParameter("Dossier", typeof(string));
    
            var dateArretParameter = dateArret.HasValue ?
                new ObjectParameter("DateArret", dateArret) :
                new ObjectParameter("DateArret", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("SPGetSumPrestaForDossier", dossierParameter, dateArretParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> SPGetSumPrestaAnnualized(string dossier, Nullable<System.DateTime> dateArret)
        {
            var dossierParameter = dossier != null ?
                new ObjectParameter("Dossier", dossier) :
                new ObjectParameter("Dossier", typeof(string));
    
            var dateArretParameter = dateArret.HasValue ?
                new ObjectParameter("DateArret", dateArret) :
                new ObjectParameter("DateArret", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("SPGetSumPrestaAnnualized", dossierParameter, dateArretParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> SPGetDateMaxForDossier(string dossier, Nullable<System.DateTime> dateArret)
        {
            var dossierParameter = dossier != null ?
                new ObjectParameter("Dossier", dossier) :
                new ObjectParameter("Dossier", typeof(string));
    
            var dateArretParameter = dateArret.HasValue ?
                new ObjectParameter("DateArret", dateArret) :
                new ObjectParameter("DateArret", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("SPGetDateMaxForDossier", dossierParameter, dateArretParameter);
        }
    
        public virtual ObjectResult<CDemoData> SPGetDemoData(string assurList, string companyList, string subsidList, string contractList, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin)
        {
            var assurListParameter = assurList != null ?
                new ObjectParameter("AssurList", assurList) :
                new ObjectParameter("AssurList", typeof(string));
    
            var companyListParameter = companyList != null ?
                new ObjectParameter("CompanyList", companyList) :
                new ObjectParameter("CompanyList", typeof(string));
    
            var subsidListParameter = subsidList != null ?
                new ObjectParameter("SubsidList", subsidList) :
                new ObjectParameter("SubsidList", typeof(string));
    
            var contractListParameter = contractList != null ?
                new ObjectParameter("ContractList", contractList) :
                new ObjectParameter("ContractList", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CDemoData>("SPGetDemoData", assurListParameter, companyListParameter, subsidListParameter, contractListParameter, dateDebutParameter, dateFinParameter);
        }
    
        public virtual ObjectResult<CDemoDataWithoutOption> SPGetDemoDataWithoutOption(string assurList, string companyList, string subsidList, string contractList, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin)
        {
            var assurListParameter = assurList != null ?
                new ObjectParameter("AssurList", assurList) :
                new ObjectParameter("AssurList", typeof(string));
    
            var companyListParameter = companyList != null ?
                new ObjectParameter("CompanyList", companyList) :
                new ObjectParameter("CompanyList", typeof(string));
    
            var subsidListParameter = subsidList != null ?
                new ObjectParameter("SubsidList", subsidList) :
                new ObjectParameter("SubsidList", typeof(string));
    
            var contractListParameter = contractList != null ?
                new ObjectParameter("ContractList", contractList) :
                new ObjectParameter("ContractList", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CDemoDataWithoutOption>("SPGetDemoDataWithoutOption", assurListParameter, companyListParameter, subsidListParameter, contractListParameter, dateDebutParameter, dateFinParameter);
        }
    }
}
